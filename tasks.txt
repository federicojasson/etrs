
Quick tasks
----------------------------

- Use DIRECTORY_SEPARATOR constant.
- Move .htaccess for subrequests to files directory (and try if it works).
- Request password for some services (e.g. create an experiment).
- Check what constants can be parameters.
- Pass maximum age and maximum inactivity time by parameter?
- Check TODO and DEFINEHERE
- Consultation\Search???
- Study\Search???
- User\Search???
- Create script for routine maintenance tasks.
- Should add a service to delete text logs (development and maintenance)?
- Canceling AJAX requests on route change: http://www.bennadel.com/blog/2616-aborting-ajax-requests-using-http-and-angularjs.htm
- Check ng-if directives.
- Check ui-sref with parameters.
- Add explanation of data-type definition in the views.
- Add explanation of others (e.g. command-line).
- Check numeric input validation: maximum value (consider database type).
- Entities: setFirstName and setLastName ---> Should received $name instead?
- Removed ready variable from entities views (when delete is implemented).

- Solve unused files uploading problem.
- Solve file indirect-deletion problem.
	
	Description:
	- A file is associated twice (for example, for an experiment and for a study).
	- One of the associations is deleted and, hence, the file is also deleted.
	- The other association loses the file as well.
	- The problem can be especially dangerous for a study's input (which is a required field.)
	
	Possible solution:
	- When a file reference is received, check that it isn't already associated with another entity. [Preferred]
	- Use different entities for files that have different roles (StudyFile, ExperimentFile, etc.).
	  Disadvantages:
		- It would require different (and repetitive) services for each file type.
		- There can be ID collisions in the files directory.


General code checks
----------------------------

- Warnings.
- Multiple spaces instead of tabulations.
- Double semicolons.
- File includes.
- != and == instead of !== and ===, respectively.
- if (!...) instead of if (! ...) (regular expression: ![^ ]).
- /* instead of /**.
- Multiple blank lines (regular expression: [\t]*\n[\t]*\n[\t]*\n).
- Lack of blank lines in PHP (regular expression: \}\n[\t]*\}).
- Multiple inline comments (regular expression: \/\/.*\n[\t]*\/\/).
- Line comments without dots (regular expression: [\t]*\/\/.*[.].*).
- Include license in all files.
- CSS all properties.
- Check that all PHP defined constants are used (directories defined too).


Release tasks
----------------------------

- Check PHP and MySQL versions in which the system was tested.
- Configure the cron-job table.
- Configure the DBMS cache.
- Change the password of database users.
- Register domain.
- Buy SSL/TSL certificate.


Other tasks
----------------------------

- Installation guide.
- API documentation.
