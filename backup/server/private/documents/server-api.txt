
================================================================================
Server API
================================================================================

About this document
-------------------

	This file summaries the server API. It describes the different services and
	the way they are invoked. For each, it indicates:

		- The URL to invoke it (relative to the site domain).
		- The accepted HTTP method.
		- The user roles authorized to request it.
		- A brief description of what is it for.
		- A detailed explanation of its usage.
		- The expected input data.
		- The output data if the operation succeeds.
		- The specific errors that may occur and their reasons.


The 'Anonymous' user role
-------------------------

	The special user role 'Anonymous' is used in this document to indicate that
	a service can be invoked by not logged in users.


Input and output formats
------------------------

	TODO: esto será así?
	It must be pointed out that both inputs and outputs should always be
	expected in JSON format. Because of this, it goes without saying that the
	order of the input (or output) has no relevance. Just to follow a
	convention, the parameters are specified alphabetically in this document.


Error responses
---------------

	In case of error, the server responds with the following JSON string:

	{
		"errorId": ...
	}

	An error ID is a predefined identifier that indicates the cause of the
	error. Client applications can receive this ID and show a custom message for
	the user.


Undefined services
------------------

	If the client sends a request for an undefined service, the server responds
	with the following error:

	----------------------------------------------------------------------------
		HTTP error:	404 Not Found
		Error ID:	UNDEFINED_SERVICE
		Reason:		The service is not defined in the server API.
	----------------------------------------------------------------------------

	Note: a service is defined by both its URL and its HTTP method. A request
	for a service with an invalid HTTP method will receive an UNDEFINED_SERVICE
	error, even though the URL is correct.


Internal server errors
----------------------

	If the server fails unexpectedly due to some internal problem, it responds
	with the following error:

	----------------------------------------------------------------------------
		HTTP error:	500 Internal Server Error
		Error ID:	UNEXPECTED_ERROR
		Reason:		The server failed unexpectedly due to some internal problem.
	----------------------------------------------------------------------------


Data types
----------

	- Gender
	  Valid gender values: 'F' (female), 'M' (male).

	- Name
	  A valid name must be a non-empty string, with a maximum of 48 characters.
	  All characters are allowed.

	- Role
	  Valid role values: 'AD' (administrator), 'DR' (doctor), 'OP' (operator),
	  'RS' (researcher).

	- Username
	  A valid username must be a non-empty string, with a maximum of 32
	  characters. It can contain the following characters: [0-9A-Z_a-z].




================================================================================
URL:	/server/get-authentication-state
Method:	POST
================================================================================

Authorized user roles
---------------------

	- administrator
	- anonymous
	- doctor
	- operator
	- researcher


Description
-----------

	Returns the user authentication state.


Details
-------

	The service is used to obtain the user authentication state in the server
	(i.e., whether the user is logged in or not).
	It doesn't receive any input.
	The output is the current authentication state, which contains an entry
	(loggedIn) that indicates whether the user is logged in. In such a case, the
	user's ID is included.


Input
-----

	None.


Output
------

	JSON string, if the user is not logged in:

	{
		"loggedIn": false
	}

	JSON string, if the user is logged in:

	{
		"loggedIn": true,
		"userId": ...
	}


Specific errors
---------------

	None.




================================================================================
URL:	/server/get-user
Method:	POST
================================================================================

Authorized user roles
---------------------

	- administrator
	- doctor
	- operator
	- researcher


Description
-----------

	Returns a user's data.


Details
-------

	The service is used to obtain information about a user.
	It receives the user's ID.
	The output is an entry (user) that contains the user information.


Input
-----

	JSON string:

	{
		"userId": ...
	}

	Conditions:
	
	- "userId" must be a valid username.


Output
------

	JSON string:

	{
		"user": {
			"gender": ...,
			"id": ...,
			"name": {
				"firstName": ...,
				"lastName": ...
			},
			"role": ...
		}
	}


Specific errors
---------------

	----------------------------------------------------------------------------
		HTTP error:	403 Forbidden
		Error ID:	UNAUTHORIZED_USER
		Reason:		The user is not authorized to invoke this service.
	----------------------------------------------------------------------------

	----------------------------------------------------------------------------
		HTTP error:	400 Bad Request
		Error ID:	INVALID_INPUT
		Reason:		The input didn't pass the validation.
	----------------------------------------------------------------------------

	----------------------------------------------------------------------------
		HTTP error:	404 Not Found
		Error ID:	USER_NOT_FOUND
		Reason:		The requested user has not been found.
	----------------------------------------------------------------------------




================================================================================
URL:	/server/log-in
Method:	POST
================================================================================

Authorized user roles
---------------------

	- anonymous


Description
-----------

	Logs in a user in the server.


Details
-------

	The service allows a user to authenticate with the server.
	It receives the user's ID and password.
	The output contains an entry (loggedIn) that indicates whether the user was
	successfully logged in.


Input
-----

	JSON string:

	{
		"userId": ...,
		"userPassword": ...
	}

	Conditions:

	- "userId" must be a non-empty string.
	- "userPassword" must be a non-empty string.


Output
------

	JSON string:

	{
		"loggedIn": ...
	}


Specific errors
---------------

	----------------------------------------------------------------------------
		HTTP error:	403 Forbidden
		Error ID:	UNAUTHORIZED_USER
		Reason:		The user is not authorized to invoke this service.
	----------------------------------------------------------------------------

	----------------------------------------------------------------------------
		HTTP error:	400 Bad Request
		Error ID:	INVALID_INPUT
		Reason:		The input didn't pass the validation.
	----------------------------------------------------------------------------




================================================================================
URL:	/server/log-out
Method:	POST
================================================================================

Authorized user roles
---------------------

	- administrator
	- doctor
	- operator
	- researcher


Description
-----------

	Logs out the user from the server.


Details
-------

	The service allows a user to end its session with the server.
	It doesn't receive any input and has no output.


Input
-----

	None.


Output
------

	None.


Specific errors
---------------

	----------------------------------------------------------------------------
		HTTP error:	403 Forbidden
		Error ID:	UNAUTHORIZED_USER
		Reason:		The user is not authorized to invoke this service.
	----------------------------------------------------------------------------




================================================================================
URL:	/server/new-deactivated-user
Method:	POST
================================================================================

Authorized user roles
---------------------

	- administrator


Description
-----------

	Creates a deactivated user temporarily and sends her an activation email.


Details
-------

	The service is used to create a new user, through a two-steps process:

	1. The administrator invokes this service to create a yet-not-active user.
	   An email is sent to the user with an activation link.

	2. The user follows the link and a request for /new-user is sent to the
	   server, which receives it, checks the validation code and, if it is
	   correct, creates the fully-active user in the system.
	
	It receives the user's information.
	The service has no output.


Input
-----

	JSON string: TODO

	{
		"user": {
			"gender": ...,
			"id": ...,
			"name": {
				"firstName": ...,
				"lastName": ...
			},
			"role": ...
		}
	}

	Conditions:

	- "gender" must be a valid gender.
	- "id" must be a valid username.
	- "firstName" must be a valid name.
	- "lastName" must be a valid name.
	- "role" must be a valid role.


Output
------

	None.


Specific errors
---------------

	----------------------------------------------------------------------------
		HTTP error:	403 Forbidden
		Error ID:	UNAUTHORIZED_USER
		Reason:		The user is not authorized to invoke this service.
	----------------------------------------------------------------------------

	----------------------------------------------------------------------------
		HTTP error:	400 Bad Request
		Error ID:	INVALID_INPUT
		Reason:		The input didn't pass the validation.
	----------------------------------------------------------------------------

	----------------------------------------------------------------------------
		HTTP error:	409 Conflict
		Error ID:	USER_ALREADY_EXISTS
		Reason:		A user already exists with the same ID.
	----------------------------------------------------------------------------



